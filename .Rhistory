library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
install.packages('XML')
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
rootNode[[1]][[1]][[1]]
xmlSApply(rootNode,xmlValue)
xpathSApply(rootNode,"//name",xmlValue)
xpathSApply(rootNode,"//price",xmlValue)
d
library(data.table)
install.packages("data.table")
DF <- data.frame(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
sessionInfo()
library(data.table)
DF <- data.frame(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DF,3)
DT <- data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DT)
tables()
DT[2,]
DT[DT$y=="a",]
DT[c(1,3)]
DT[,c(1,2)]
DT[,list(mean(x),sum(z))]
DT[,table(y)]
DT[,w:=z^2]
DT
DT[,m:={tmp<-(x+z); log2(tmp+5)}]
DT[,b:=mean(x+y),by=a]
e operations
DT[,a:=x>0]
DT[,b:=mean(x+y),by=a]
DT
DT[,b:=mean(x+w),bya]
DT[,b:=mean(x+w),by=a]
DT
#special variables
set.seed(123)
DT <- data.table(x=sample(letters[1:3],1E5,TRUE))
DT[,.N,by=x]
setkey(DT,x)
DT['a']
library(rtools)
source("http://bioconductor.org/biocLite.R")
bioLite("rhdf5")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf6)
library(rhdf5)
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/fooba")
h5ls("example.h5")
#adding a matrix
A = matrix(1:10,nr=5,nc=2)
h5write(A, "example.h5","foo/A")
B = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
attr(B,"scale") <- "liter"
h5write(B,"example.h5","foo/foobaa/B")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
A = matrix(1:10,nr=5,nc=2)
h5write(A, "example.h5","foo/A")
B = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
attr(B,"scale") <- "liter"
h5write(B,"example.h5","foo/foobaa/B")
h5write(B,"example.h5","foo/foobaa/B")
h5ls("example.h5")
df = data.frame(1L:5L,seq(0,1,length.out = 5),
c("ab","cde","fghi","a","s"), stringsAsFactors=FALSE)
h5write(df,"example.h5","df")
h5ls("example.h5")
readA = h5read("example.h5","foo/A")
readB = h5read("example.h5","df")
readA
h5write(c(12,13,14),"example.h5","foo/A",index=list(1:3,1))
h5read("example.h5","foo/A")
h5read("example.h5","foo/A",index=list(1:3,1))
source('~/.active-rstudio-document', echo=TRUE)
str(spam[,1:5])
library(kernlab)
data(spam)
str(spam[,1:5])
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
testSpam
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[,1:4]+1))
hClusterUpdated = hclust(dist(t(log10(trainSpam[,1:55]+ 1))))
hClusterUpdated = hclust(dist(t(log10(trainSpam[,1:55]+ 1))))
plot(hClusterUpdated)
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
## Use the best model from the group
predictionModel = glm(numType ~ charDollar, family = "binomial", data = trainSpam)
## Get predictions on the test set
predictionTest = predict(predictionModel, testSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
## Classify as `spam' for those with prob > 0.5
predictedSpam[predictionModel$fitted > 0.5] = "spam"
predictedSpam
c(0,1,1,1,1,1,2)
c(0,1,2,3,4,5,6)
c(0, 25, 25, 25, 25, 25, 25)
c(0, 100, 200, 300, 400, 500, 600)
sd( c(0,1,1,1,1,1,2))
sd(c(0,1,2,3,4,5,6))
sd(c(0, 25, 25, 25, 25, 25, 25))
sd(c(0, 100, 200, 300, 400, 500, 600))
setwd("C:/Users/Gabriel/SkyDrive/coursera/DataScienceTrack/ReproducipleResearch/Project 1/RepData_PeerAssessment1")
#Load the data (i.e. read.csv())
df <- read.csv("activity.csv")
#Process/transform the data (if necessary) into a format suitable for your analysis
df$date <- as.Date(df$date)
#Make a histogram of the total number of steps taken each day
library(ggplot2)
total.steps.by.day <- aggregate(x = df$steps , by = list(df$date), FUN = sum ,na.rm=TRUE)
names(total.steps.by.day) <- c("date","steps")
histplot <- ggplot(total.steps.by.day,aes(x = steps)) +
ggtitle("Histogram of daily steps") +
xlab("Steps (binwidth 2000)") +
geom_histogram(binwidth = 2000)
histplot
#Calculate and report the mean and median total number of steps taken per day
mean(total.steps.by.day$steps , na.rm = TRUE)
median(total.steps.by.day$steps , na.rm = TRUE)
#Make a time series plot (i.e. type = "l") of the  5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
average.steps.by.interval  <- aggregate(x = df$steps , by = list(df$interval), FUN = mean ,na.rm=TRUE)
names(average.steps.by.interval) <- c("interval","steps")
avg.step.line <- ggplot(average.steps.by.interval,aes(interval,steps)) +
ggtitle("Time Series Plot of Average Steps by Interval") +
geom_line()
avg.step.line
#Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
average.steps.by.interval[which.max(average.steps.by.interval$steps),c("interval")]
#total number of missing values in the dataset
nrow(df[is.na(df$steps),])
#imputing missing step values with mean step at time interval
df.imputed <- merge(x = df, y = average.steps.by.interval, by = "interval", all.x = TRUE)
df.imputed[is.na(df.imputed$steps.x),c("steps.x")] <- df.imputed[is.na(df.imputed$steps.x),c("steps.y")]
#clean data
df.imputed$date <- as.Date(df.imputed$date.x)
df.imputed$date.x <- NULL
df.imputed$Group.1 <- NULL
df.imputed$steps <- df.imputed$steps.x
df.imputed$steps.x <- NULL
df.imputed$steps.y <- NULL
#create histogram with new dataframe
total.steps.by.day <- aggregate(x = df.imputed$steps , by = list(df.imputed$date), FUN = sum ,na.rm=TRUE)
names(total.steps.by.day) <- c("date","steps")
histplot <- ggplot(total.steps.by.day,aes(x = steps)) +
ggtitle("Histogram of daily steps") +
xlab("Steps (binwidth 2000)") +
geom_histogram(binwidth = 2000)
histplot
#Calculate and report the mean and median total number of steps taken per day
mean(total.steps.by.day$steps , na.rm = TRUE)
median(total.steps.by.day$steps , na.rm = TRUE)
#create histogram with new dataframe
total.steps.by.day <- aggregate(x = df.imputed$steps , by = list(df.imputed$date), FUN = sum ,na.rm=TRUE)
getwd()
